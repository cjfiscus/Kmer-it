import pandas as pd
from snakemake.utils import min_version
min_version("5.3.0")

configfile: "config/config.yaml"
samples = pd.read_table("config/samples.tsv").set_index("id", drop=False)
all_ids=list(samples["id"])

rule all:
    input:
        expand("results/counts/{id}.txt.gz", id=all_ids)

rule build_organellar_genome_db:
    """
    Download and format Organellar Genomes from NCBI Organelle Genome Resources
    """
    output:
        "resources/org_genomes.fa", 
        expand("resources/org_genomes.fa.{ext}", ext=["ann", "bwt", "pac", "sa"])
    shell:
        """
        # dl refseq from ncbi
        wget -nd -np -r -A 'mitochondrion.*.*.genomic.fna.gz' ftp://ftp.ncbi.nlm.nih.gov/refseq/release/mitochondrion/
        wget -nd -np -r -A 'plastid.*.*.genomic.fna.gz' ftp://ftp.ncbi.nlm.nih.gov/refseq/release/plastid/

        # combine files
        gunzip -c *.fna.gz > resources/org_genomes.fa        

        # index with bwa
        bwa index resources/org_genomes.fa 
        
        # cleanup 
        rm mitochondrion.*.*.genomic.fna.gz
        rm plastid.*.*.genomic.fna.gz       
        """

# re-write following rule to create symlink, this is only for testing
ruleorder: cp_fastq_pe > cp_fastq_se
rule cp_fastq_pe:
    """
    copy file to resources
    """
    input:
        fq1=lambda wildcards: samples.loc[wildcards.id, "fq1"],
        fq2=lambda wildcards: samples.loc[wildcards.id, "fq2"] if "fq2" in samples else "non-existing-filename"
    output:
        "resources/fq/{id}_1.fq.gz",
        "resources/fq/{id}_2.fq.gz"
    shell:
        """
        cp {input.fq1} {output[0]}
        cp {input.fq2} {output[1]}
        """
       
rule rule cp_fastq_se:
    """
    copy file to resources
    """
    input:
        fq1=lambda wildcards: samples.loc[wildcards.id, "fq1"]
    output:
        "resources/fq/{id}.fq.gz",
    shell:
        """
        cp {input.fq1} {output}
        """

ruleorder: trim_reads_pe > trim_reads_se
rule trim_reads_pe:
    """
    trim adapters and low quality sequence with trimmomatic for pe runs
    """
    input:
        "resources/fq/{id}_1.fq.gz",
        "resources/fq/{id}_2.fq.gz"
    output:
        temp("results/trimmed/{id}_1_trimmed.fq.gz"),
        temp("results/trimmed/{id}_1_trimmed_unpaired.fq.gz"),
        temp("results/trimmed/{id}_2_trimmed.fq.gz"),
        temp("results/trimmed/{id}_2_trimmed_unpaired.fq.gz")
    params:
        trim_params = config["trimming"]["trimmomatic_pe"]
    threads: 3
    shell:
        """
        trimmomatic PE -threads {threads} \
        {input[0]} {input[1]} \
        {output[0]} {output[1]} \
        {output[2]} {output[3]} \
        {params.trim_params}
        """

rule trim_reads_se:
    """
    trim adapters and low quality sequence with trimmomatic for se runs
    """
    input:
        "resources/fq/{id}.fq.gz"
    output:
        temp("results/trimmed/{id}_trimmed.fq.gz")
    params:
        trim_params = config["trimming"]["trimmomatic_se"]
    threads: 3
    shell:
         """
	 trimmomatic SE -threads {threads} \
	 {input} {output} \
	 {params.trim_params}
	 """

ruleorder: map_to_organelle_genomes_pe > map_to_organelle_genomes_se
rule map_to_organelle_genomes_pe:
    """
    map reads to organellar genomes
    """
    input:
        "resources/org_genomes.fa",
        "results/trimmed/{id}_1_trimmed.fq.gz",
        "results/trimmed/{id}_2_trimmed.fq.gz"
    output:
        temp("results/alignments/{id}.sam")
    threads: 4
    shell:
        """
        bwa mem -t {threads} -M {input} > {output}
        """

rule map_to_organelle_genomes_se:
    """
    map reads to organelle genome
    """
    input:
        "resources/org_genomes.fa",
	"results/trimmed/{id}_trimmed.fq.gz"
    output:
        temp("results/alignments/{id}.sam")
    threads: 4
    shell:
        """
	bwa mem -t {threads} -M {input} > {output}
	"""
rule sam_2_sorted_bam_unmapped:
    """
    convert sam to sorted bam, then subset bam for unmapped reads
    """
    input:
         "results/alignments/{id}.sam"
    output:
         temp("results/unmapped/{id}.unmapped.bam")
    shell:
        """
        samtools view -bS {input} | samtools sort -T {wildcards.id} - | samtools view -f4 -b - > {output}
        """

rule extract_unmapped_reads:
    """
    extract unmapped reads from bam
    """
    input: 
        "results/unmapped/{id}.unmapped.bam"
    output:
        temp("results/unmapped/{id}.unmapped.fq")
    shell:
        """
        bedtools bamtofastq -i {input} -fq {output}
        """

rule count_kmers:
    """
    count kmers in seq reads
    """
    input:
        "results/unmapped/{id}.unmapped.fq"
    output:
        temp("results/counts/{id}.jf"),
        "results/counts/{id}.txt.gz"
    params:
        k=config['k'] 
    threads: 16
    shell:
        """
        jellyfish count -C -m {params.k} -s 500M -t {threads} -o {output[0]} {input}

        jellyfish dump -tc {output[0]} | gzip > {output[1]}
        """
